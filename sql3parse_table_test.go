package parse

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestTableName(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER)")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Empty(t, table.TableConstraints)
}

func TestTableSchema(t *testing.T) {
	table, err := FromString("CREATE TABLE s.a (b INTEGER)")
	assert.NoError(t, err)
	assert.NotNil(t, table.Schema)
	assert.Equal(t, "s", *table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Empty(t, table.TableConstraints)
}

func TestTableTemporary(t *testing.T) {
	tableTemp, err := FromString("CREATE TEMP TABLE a (b INTEGER)")
	assert.NoError(t, err)
	assert.Nil(t, tableTemp.Schema)
	assert.NotNil(t, tableTemp.Name)
	assert.Equal(t, "a", *tableTemp.Name)
	assert.True(t, tableTemp.Temporary)
	assert.False(t, tableTemp.IfNotExists)
	assert.False(t, tableTemp.WithoutRowid)
	assert.Len(t, tableTemp.Columns, 1)
	assert.NotNil(t, tableTemp.Columns[0].Name)
	assert.Equal(t, "b", *tableTemp.Columns[0].Name)
	assert.NotNil(t, tableTemp.Columns[0].Type)
	assert.Equal(t, "INTEGER", *tableTemp.Columns[0].Type)
	assert.Nil(t, tableTemp.Columns[0].Length)
	assert.Nil(t, tableTemp.Columns[0].ConstraintName)
	assert.False(t, tableTemp.Columns[0].PrimaryKey)
	assert.False(t, tableTemp.Columns[0].Autoincrement)
	assert.False(t, tableTemp.Columns[0].NotNull)
	assert.False(t, tableTemp.Columns[0].Unique)
	assert.Equal(t, OrderNone, tableTemp.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, tableTemp.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, tableTemp.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, tableTemp.Columns[0].UniqueConflict)
	assert.Nil(t, tableTemp.Columns[0].Check)
	assert.Nil(t, tableTemp.Columns[0].Default)
	assert.Nil(t, tableTemp.Columns[0].CollateName)
	assert.Nil(t, tableTemp.Columns[0].ForeignKey)
	assert.Empty(t, tableTemp.TableConstraints)

	tableTemporary, err := FromString("CREATE TEMPORARY TABLE a (b INTEGER)")
	assert.NoError(t, err)
	assert.Nil(t, tableTemporary.Schema)
	assert.NotNil(t, tableTemporary.Name)
	assert.Equal(t, "a", *tableTemporary.Name)
	assert.True(t, tableTemporary.Temporary)
	assert.False(t, tableTemporary.IfNotExists)
	assert.False(t, tableTemporary.WithoutRowid)
	assert.Len(t, tableTemporary.Columns, 1)
	assert.NotNil(t, tableTemporary.Columns[0].Name)
	assert.Equal(t, "b", *tableTemporary.Columns[0].Name)
	assert.NotNil(t, tableTemporary.Columns[0].Type)
	assert.Equal(t, "INTEGER", *tableTemporary.Columns[0].Type)
	assert.Nil(t, tableTemporary.Columns[0].Length)
	assert.Nil(t, tableTemporary.Columns[0].ConstraintName)
	assert.False(t, tableTemporary.Columns[0].PrimaryKey)
	assert.False(t, tableTemporary.Columns[0].Autoincrement)
	assert.False(t, tableTemporary.Columns[0].NotNull)
	assert.False(t, tableTemporary.Columns[0].Unique)
	assert.Equal(t, OrderNone, tableTemporary.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, tableTemporary.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, tableTemporary.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, tableTemporary.Columns[0].UniqueConflict)
	assert.Nil(t, tableTemporary.Columns[0].Check)
	assert.Nil(t, tableTemporary.Columns[0].Default)
	assert.Nil(t, tableTemporary.Columns[0].CollateName)
	assert.Nil(t, tableTemporary.Columns[0].ForeignKey)
	assert.Empty(t, tableTemporary.TableConstraints)
}

func TestTableIfNotExists(t *testing.T) {
	table, err := FromString("CREATE TABLE IF NOT EXISTS a (b INTEGER)")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.True(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Empty(t, table.TableConstraints)
}

func TestTableWithoutRowid(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER) WITHOUT ROWID")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.True(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Empty(t, table.TableConstraints)
}

func TestTableColumns(t *testing.T) {
	tableOneColumn, err := FromString("CREATE TABLE a (b INTEGER)")
	assert.NoError(t, err)
	assert.Nil(t, tableOneColumn.Schema)
	assert.NotNil(t, tableOneColumn.Name)
	assert.Equal(t, "a", *tableOneColumn.Name)
	assert.False(t, tableOneColumn.Temporary)
	assert.False(t, tableOneColumn.IfNotExists)
	assert.False(t, tableOneColumn.WithoutRowid)
	assert.Len(t, tableOneColumn.Columns, 1)
	assert.NotNil(t, tableOneColumn.Columns[0].Name)
	assert.Equal(t, "b", *tableOneColumn.Columns[0].Name)
	assert.NotNil(t, tableOneColumn.Columns[0].Type)
	assert.Equal(t, "INTEGER", *tableOneColumn.Columns[0].Type)
	assert.Nil(t, tableOneColumn.Columns[0].Length)
	assert.Nil(t, tableOneColumn.Columns[0].ConstraintName)
	assert.False(t, tableOneColumn.Columns[0].PrimaryKey)
	assert.False(t, tableOneColumn.Columns[0].Autoincrement)
	assert.False(t, tableOneColumn.Columns[0].NotNull)
	assert.False(t, tableOneColumn.Columns[0].Unique)
	assert.Equal(t, OrderNone, tableOneColumn.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, tableOneColumn.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, tableOneColumn.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, tableOneColumn.Columns[0].UniqueConflict)
	assert.Nil(t, tableOneColumn.Columns[0].Check)
	assert.Nil(t, tableOneColumn.Columns[0].Default)
	assert.Nil(t, tableOneColumn.Columns[0].CollateName)
	assert.Nil(t, tableOneColumn.Columns[0].ForeignKey)
	assert.Empty(t, tableOneColumn.TableConstraints)

	tableThreeColumns, err := FromString("CREATE TABLE a (b INTEGER, c TEXT, d REAL)")
	assert.NoError(t, err)
	assert.Nil(t, tableThreeColumns.Schema)
	assert.NotNil(t, tableThreeColumns.Name)
	assert.Equal(t, "a", *tableThreeColumns.Name)
	assert.False(t, tableThreeColumns.Temporary)
	assert.False(t, tableThreeColumns.IfNotExists)
	assert.False(t, tableThreeColumns.WithoutRowid)
	assert.Len(t, tableThreeColumns.Columns, 3)
	assert.NotNil(t, tableThreeColumns.Columns[0].Name)
	assert.Equal(t, "b", *tableThreeColumns.Columns[0].Name)
	assert.NotNil(t, tableThreeColumns.Columns[0].Type)
	assert.Equal(t, "INTEGER", *tableThreeColumns.Columns[0].Type)
	assert.Nil(t, tableThreeColumns.Columns[0].Length)
	assert.Nil(t, tableThreeColumns.Columns[0].ConstraintName)
	assert.False(t, tableThreeColumns.Columns[0].PrimaryKey)
	assert.False(t, tableThreeColumns.Columns[0].Autoincrement)
	assert.False(t, tableThreeColumns.Columns[0].NotNull)
	assert.False(t, tableThreeColumns.Columns[0].Unique)
	assert.Equal(t, OrderNone, tableThreeColumns.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, tableThreeColumns.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, tableThreeColumns.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, tableThreeColumns.Columns[0].UniqueConflict)
	assert.Nil(t, tableThreeColumns.Columns[0].Check)
	assert.Nil(t, tableThreeColumns.Columns[0].Default)
	assert.Nil(t, tableThreeColumns.Columns[0].CollateName)
	assert.Nil(t, tableThreeColumns.Columns[0].ForeignKey)
	assert.NotNil(t, tableThreeColumns.Columns[1].Name)
	assert.Equal(t, "c", *tableThreeColumns.Columns[1].Name)
	assert.NotNil(t, tableThreeColumns.Columns[1].Type)
	assert.Equal(t, "TEXT", *tableThreeColumns.Columns[1].Type)
	assert.Nil(t, tableThreeColumns.Columns[1].Length)
	assert.Nil(t, tableThreeColumns.Columns[1].ConstraintName)
	assert.False(t, tableThreeColumns.Columns[1].PrimaryKey)
	assert.False(t, tableThreeColumns.Columns[1].Autoincrement)
	assert.False(t, tableThreeColumns.Columns[1].NotNull)
	assert.False(t, tableThreeColumns.Columns[1].Unique)
	assert.Equal(t, OrderNone, tableThreeColumns.Columns[1].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, tableThreeColumns.Columns[1].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, tableThreeColumns.Columns[1].NotNullConflict)
	assert.Equal(t, ConflictNone, tableThreeColumns.Columns[1].UniqueConflict)
	assert.Nil(t, tableThreeColumns.Columns[1].Check)
	assert.Nil(t, tableThreeColumns.Columns[1].Default)
	assert.Nil(t, tableThreeColumns.Columns[1].CollateName)
	assert.Nil(t, tableThreeColumns.Columns[1].ForeignKey)
	assert.NotNil(t, tableThreeColumns.Columns[2].Name)
	assert.Equal(t, "d", *tableThreeColumns.Columns[2].Name)
	assert.NotNil(t, tableThreeColumns.Columns[2].Type)
	assert.Equal(t, "REAL", *tableThreeColumns.Columns[2].Type)
	assert.Nil(t, tableThreeColumns.Columns[2].Length)
	assert.Nil(t, tableThreeColumns.Columns[2].ConstraintName)
	assert.False(t, tableThreeColumns.Columns[2].PrimaryKey)
	assert.False(t, tableThreeColumns.Columns[2].Autoincrement)
	assert.False(t, tableThreeColumns.Columns[2].NotNull)
	assert.False(t, tableThreeColumns.Columns[2].Unique)
	assert.Equal(t, OrderNone, tableThreeColumns.Columns[2].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, tableThreeColumns.Columns[2].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, tableThreeColumns.Columns[2].NotNullConflict)
	assert.Equal(t, ConflictNone, tableThreeColumns.Columns[2].UniqueConflict)
	assert.Nil(t, tableThreeColumns.Columns[2].Check)
	assert.Nil(t, tableThreeColumns.Columns[2].Default)
	assert.Nil(t, tableThreeColumns.Columns[2].CollateName)
	assert.Nil(t, tableThreeColumns.Columns[2].ForeignKey)
	assert.Empty(t, tableThreeColumns.TableConstraints)
}

func TestTableConstraints(t *testing.T) {
	tableZeroConstraints, err := FromString("CREATE TABLE a (b INTEGER)")
	assert.NoError(t, err)
	assert.Nil(t, tableZeroConstraints.Schema)
	assert.NotNil(t, tableZeroConstraints.Name)
	assert.Equal(t, "a", *tableZeroConstraints.Name)
	assert.False(t, tableZeroConstraints.Temporary)
	assert.False(t, tableZeroConstraints.IfNotExists)
	assert.False(t, tableZeroConstraints.WithoutRowid)
	assert.Len(t, tableZeroConstraints.Columns, 1)
	assert.NotNil(t, tableZeroConstraints.Columns[0].Name)
	assert.Equal(t, "b", *tableZeroConstraints.Columns[0].Name)
	assert.NotNil(t, tableZeroConstraints.Columns[0].Type)
	assert.Equal(t, "INTEGER", *tableZeroConstraints.Columns[0].Type)
	assert.Nil(t, tableZeroConstraints.Columns[0].Length)
	assert.Nil(t, tableZeroConstraints.Columns[0].ConstraintName)
	assert.False(t, tableZeroConstraints.Columns[0].PrimaryKey)
	assert.False(t, tableZeroConstraints.Columns[0].Autoincrement)
	assert.False(t, tableZeroConstraints.Columns[0].NotNull)
	assert.False(t, tableZeroConstraints.Columns[0].Unique)
	assert.Equal(t, OrderNone, tableZeroConstraints.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, tableZeroConstraints.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, tableZeroConstraints.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, tableZeroConstraints.Columns[0].UniqueConflict)
	assert.Nil(t, tableZeroConstraints.Columns[0].Check)
	assert.Nil(t, tableZeroConstraints.Columns[0].Default)
	assert.Nil(t, tableZeroConstraints.Columns[0].CollateName)
	assert.Nil(t, tableZeroConstraints.Columns[0].ForeignKey)
	assert.Empty(t, tableZeroConstraints.TableConstraints)

	tableOneConstraint, err := FromString("CREATE TABLE a (b INTEGER, UNIQUE (b))")
	assert.NoError(t, err)
	assert.Nil(t, tableOneConstraint.Schema)
	assert.NotNil(t, tableOneConstraint.Name)
	assert.Equal(t, "a", *tableOneConstraint.Name)
	assert.False(t, tableOneConstraint.Temporary)
	assert.False(t, tableOneConstraint.IfNotExists)
	assert.False(t, tableOneConstraint.WithoutRowid)
	assert.Len(t, tableOneConstraint.Columns, 1)
	assert.NotNil(t, tableOneConstraint.Columns[0].Name)
	assert.Equal(t, "b", *tableOneConstraint.Columns[0].Name)
	assert.NotNil(t, tableOneConstraint.Columns[0].Type)
	assert.Equal(t, "INTEGER", *tableOneConstraint.Columns[0].Type)
	assert.Nil(t, tableOneConstraint.Columns[0].Length)
	assert.Nil(t, tableOneConstraint.Columns[0].ConstraintName)
	assert.False(t, tableOneConstraint.Columns[0].PrimaryKey)
	assert.False(t, tableOneConstraint.Columns[0].Autoincrement)
	assert.False(t, tableOneConstraint.Columns[0].NotNull)
	assert.False(t, tableOneConstraint.Columns[0].Unique)
	assert.Equal(t, OrderNone, tableOneConstraint.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, tableOneConstraint.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, tableOneConstraint.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, tableOneConstraint.Columns[0].UniqueConflict)
	assert.Nil(t, tableOneConstraint.Columns[0].Check)
	assert.Nil(t, tableOneConstraint.Columns[0].Default)
	assert.Nil(t, tableOneConstraint.Columns[0].CollateName)
	assert.Nil(t, tableOneConstraint.Columns[0].ForeignKey)
	assert.Len(t, tableOneConstraint.TableConstraints, 1)
	assert.Nil(t, tableOneConstraint.TableConstraints[0].Name)
	assert.Equal(t, TableConstraintTypeUnique, tableOneConstraint.TableConstraints[0].Type)
	assert.Len(t, tableOneConstraint.TableConstraints[0].IndexedColumns, 1)
	assert.NotNil(t, tableOneConstraint.TableConstraints[0].IndexedColumns[0].Name)
	assert.Equal(t, "b", *tableOneConstraint.TableConstraints[0].IndexedColumns[0].Name)
	assert.Nil(t, tableOneConstraint.TableConstraints[0].IndexedColumns[0].Collate)
	assert.Equal(t, OrderNone, tableOneConstraint.TableConstraints[0].IndexedColumns[0].Order)
	assert.Equal(t, ConflictNone, tableOneConstraint.TableConstraints[0].ConflictClause)
	assert.Nil(t, tableOneConstraint.TableConstraints[0].Check)
	assert.Empty(t, tableOneConstraint.TableConstraints[0].ForeignKeyColumns)
	assert.Nil(t, tableOneConstraint.TableConstraints[0].ForeignKey)

	tableThreeConstraints, err := FromString("CREATE TABLE a (b INTEGER, UNIQUE (b), UNIQUE (b), UNIQUE (b))")
	assert.NoError(t, err)
	assert.Nil(t, tableThreeConstraints.Schema)
	assert.NotNil(t, tableThreeConstraints.Name)
	assert.Equal(t, "a", *tableThreeConstraints.Name)
	assert.False(t, tableThreeConstraints.Temporary)
	assert.False(t, tableThreeConstraints.IfNotExists)
	assert.False(t, tableThreeConstraints.WithoutRowid)
	assert.Len(t, tableThreeConstraints.Columns, 1)
	assert.NotNil(t, tableThreeConstraints.Columns[0].Name)
	assert.Equal(t, "b", *tableThreeConstraints.Columns[0].Name)
	assert.NotNil(t, tableThreeConstraints.Columns[0].Type)
	assert.Equal(t, "INTEGER", *tableThreeConstraints.Columns[0].Type)
	assert.Nil(t, tableThreeConstraints.Columns[0].Length)
	assert.Nil(t, tableThreeConstraints.Columns[0].ConstraintName)
	assert.False(t, tableThreeConstraints.Columns[0].PrimaryKey)
	assert.False(t, tableThreeConstraints.Columns[0].Autoincrement)
	assert.False(t, tableThreeConstraints.Columns[0].NotNull)
	assert.False(t, tableThreeConstraints.Columns[0].Unique)
	assert.Equal(t, OrderNone, tableThreeConstraints.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, tableThreeConstraints.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, tableThreeConstraints.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, tableThreeConstraints.Columns[0].UniqueConflict)
	assert.Nil(t, tableThreeConstraints.Columns[0].Check)
	assert.Nil(t, tableThreeConstraints.Columns[0].Default)
	assert.Nil(t, tableThreeConstraints.Columns[0].CollateName)
	assert.Nil(t, tableThreeConstraints.Columns[0].ForeignKey)
	assert.Len(t, tableThreeConstraints.TableConstraints, 3)
	assert.Nil(t, tableThreeConstraints.TableConstraints[0].Name)
	assert.Equal(t, TableConstraintTypeUnique, tableThreeConstraints.TableConstraints[0].Type)
	assert.Len(t, tableThreeConstraints.TableConstraints[0].IndexedColumns, 1)
	assert.NotNil(t, tableThreeConstraints.TableConstraints[0].IndexedColumns[0].Name)
	assert.Equal(t, "b", *tableThreeConstraints.TableConstraints[0].IndexedColumns[0].Name)
	assert.Nil(t, tableThreeConstraints.TableConstraints[0].IndexedColumns[0].Collate)
	assert.Equal(t, OrderNone, tableThreeConstraints.TableConstraints[0].IndexedColumns[0].Order)
	assert.Equal(t, ConflictNone, tableThreeConstraints.TableConstraints[0].ConflictClause)
	assert.Nil(t, tableThreeConstraints.TableConstraints[0].Check)
	assert.Empty(t, tableThreeConstraints.TableConstraints[0].ForeignKeyColumns)
	assert.Nil(t, tableThreeConstraints.TableConstraints[0].ForeignKey)
	assert.Nil(t, tableThreeConstraints.TableConstraints[1].Name)
	assert.Equal(t, TableConstraintTypeUnique, tableThreeConstraints.TableConstraints[1].Type)
	assert.Len(t, tableThreeConstraints.TableConstraints[1].IndexedColumns, 1)
	assert.NotNil(t, tableThreeConstraints.TableConstraints[1].IndexedColumns[0].Name)
	assert.Equal(t, "b", *tableThreeConstraints.TableConstraints[1].IndexedColumns[0].Name)
	assert.Nil(t, tableThreeConstraints.TableConstraints[1].IndexedColumns[0].Collate)
	assert.Equal(t, OrderNone, tableThreeConstraints.TableConstraints[1].IndexedColumns[0].Order)
	assert.Equal(t, ConflictNone, tableThreeConstraints.TableConstraints[1].ConflictClause)
	assert.Nil(t, tableThreeConstraints.TableConstraints[1].Check)
	assert.Empty(t, tableThreeConstraints.TableConstraints[1].ForeignKeyColumns)
	assert.Nil(t, tableThreeConstraints.TableConstraints[1].ForeignKey)
	assert.Nil(t, tableThreeConstraints.TableConstraints[2].Name)
	assert.Equal(t, TableConstraintTypeUnique, tableThreeConstraints.TableConstraints[2].Type)
	assert.Len(t, tableThreeConstraints.TableConstraints[2].IndexedColumns, 1)
	assert.NotNil(t, tableThreeConstraints.TableConstraints[2].IndexedColumns[0].Name)
	assert.Equal(t, "b", *tableThreeConstraints.TableConstraints[2].IndexedColumns[0].Name)
	assert.Nil(t, tableThreeConstraints.TableConstraints[2].IndexedColumns[0].Collate)
	assert.Equal(t, OrderNone, tableThreeConstraints.TableConstraints[2].IndexedColumns[0].Order)
	assert.Equal(t, ConflictNone, tableThreeConstraints.TableConstraints[2].ConflictClause)
	assert.Nil(t, tableThreeConstraints.TableConstraints[2].Check)
	assert.Empty(t, tableThreeConstraints.TableConstraints[2].ForeignKeyColumns)
	assert.Nil(t, tableThreeConstraints.TableConstraints[2].ForeignKey)
}

func TestTableColumnName(t *testing.T) {
	table, err := FromString("CREATE TABLE a (blabla INTEGER)")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "blabla", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Empty(t, table.TableConstraints)
}

func TestTableColumnType(t *testing.T) {
	checkColumnType := func(t *testing.T, columnType string) {
		table, err := FromString("CREATE TABLE a (b " + columnType + ")")
		assert.NoError(t, err, "CREATE TABLE a (b "+columnType+")")
		assert.Nil(t, table.Schema)
		assert.NotNil(t, table.Name)
		assert.Equal(t, "a", *table.Name)
		assert.False(t, table.Temporary)
		assert.False(t, table.IfNotExists)
		assert.False(t, table.WithoutRowid)
		assert.Len(t, table.Columns, 1)
		assert.NotNil(t, table.Columns[0].Name)
		assert.Equal(t, "b", *table.Columns[0].Name)
		assert.NotNil(t, table.Columns[0].Type)
		assert.Equal(t, columnType, *table.Columns[0].Type)
		assert.Nil(t, table.Columns[0].Length)
		assert.Nil(t, table.Columns[0].ConstraintName)
		assert.False(t, table.Columns[0].PrimaryKey)
		assert.False(t, table.Columns[0].Autoincrement)
		assert.False(t, table.Columns[0].NotNull)
		assert.False(t, table.Columns[0].Unique)
		assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
		assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
		assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
		assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
		assert.Nil(t, table.Columns[0].Check)
		assert.Nil(t, table.Columns[0].Default)
		assert.Nil(t, table.Columns[0].CollateName)
		assert.Nil(t, table.Columns[0].ForeignKey)
		assert.Empty(t, table.TableConstraints)
	}

	// NULL type column is not allowed
	checkColumnType(t, "INTEGER")
	checkColumnType(t, "REAL")
	checkColumnType(t, "TEXT")
	checkColumnType(t, "BLOB")
}

func TestTableColumnLength(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER(42))")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.NotNil(t, table.Columns[0].Length)
	assert.Equal(t, "42", *table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Empty(t, table.TableConstraints)
}

func TestTableColumnConstraintName(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER CONSTRAINT foo NOT NULL)")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.NotNil(t, table.Columns[0].ConstraintName)
	assert.Equal(t, "foo", *table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.True(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Empty(t, table.TableConstraints)
}

func TestTableColumnPrimaryKey(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER PRIMARY KEY)")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.True(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Empty(t, table.TableConstraints)
}

func TestTableColumnAutoincrement(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER PRIMARY KEY AUTOINCREMENT)")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.True(t, table.Columns[0].PrimaryKey)
	assert.True(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Empty(t, table.TableConstraints)
}

func TestTableColumnNotNull(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER NOT NULL)")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.True(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Empty(t, table.TableConstraints)
}

func TestTableColumnUnique(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER UNIQUE)")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.True(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Empty(t, table.TableConstraints)
}

func TestTableColumnPrimaryKeyOrder(t *testing.T) {
	tableAsc, err := FromString("CREATE TABLE a (b INTEGER PRIMARY KEY ASC)")
	assert.NoError(t, err)
	assert.Nil(t, tableAsc.Schema)
	assert.NotNil(t, tableAsc.Name)
	assert.Equal(t, "a", *tableAsc.Name)
	assert.False(t, tableAsc.Temporary)
	assert.False(t, tableAsc.IfNotExists)
	assert.False(t, tableAsc.WithoutRowid)
	assert.Len(t, tableAsc.Columns, 1)
	assert.NotNil(t, tableAsc.Columns[0].Name)
	assert.Equal(t, "b", *tableAsc.Columns[0].Name)
	assert.NotNil(t, tableAsc.Columns[0].Type)
	assert.Equal(t, "INTEGER", *tableAsc.Columns[0].Type)
	assert.Nil(t, tableAsc.Columns[0].Length)
	assert.Nil(t, tableAsc.Columns[0].ConstraintName)
	assert.True(t, tableAsc.Columns[0].PrimaryKey)
	assert.False(t, tableAsc.Columns[0].Autoincrement)
	assert.False(t, tableAsc.Columns[0].NotNull)
	assert.False(t, tableAsc.Columns[0].Unique)
	assert.Equal(t, OrderAsc, tableAsc.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, tableAsc.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, tableAsc.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, tableAsc.Columns[0].UniqueConflict)
	assert.Nil(t, tableAsc.Columns[0].Check)
	assert.Nil(t, tableAsc.Columns[0].Default)
	assert.Nil(t, tableAsc.Columns[0].CollateName)
	assert.Nil(t, tableAsc.Columns[0].ForeignKey)
	assert.Empty(t, tableAsc.TableConstraints)

	tableDesc, err := FromString("CREATE TABLE a (b INTEGER PRIMARY KEY DESC)")
	assert.NoError(t, err)
	assert.Nil(t, tableDesc.Schema)
	assert.NotNil(t, tableDesc.Name)
	assert.Equal(t, "a", *tableDesc.Name)
	assert.False(t, tableDesc.Temporary)
	assert.False(t, tableDesc.IfNotExists)
	assert.False(t, tableDesc.WithoutRowid)
	assert.Len(t, tableDesc.Columns, 1)
	assert.NotNil(t, tableDesc.Columns[0].Name)
	assert.Equal(t, "b", *tableDesc.Columns[0].Name)
	assert.NotNil(t, tableDesc.Columns[0].Type)
	assert.Equal(t, "INTEGER", *tableDesc.Columns[0].Type)
	assert.Nil(t, tableDesc.Columns[0].Length)
	assert.Nil(t, tableDesc.Columns[0].ConstraintName)
	assert.True(t, tableDesc.Columns[0].PrimaryKey)
	assert.False(t, tableDesc.Columns[0].Autoincrement)
	assert.False(t, tableDesc.Columns[0].NotNull)
	assert.False(t, tableDesc.Columns[0].Unique)
	assert.Equal(t, OrderDesc, tableDesc.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, tableDesc.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, tableDesc.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, tableDesc.Columns[0].UniqueConflict)
	assert.Nil(t, tableDesc.Columns[0].Check)
	assert.Nil(t, tableDesc.Columns[0].Default)
	assert.Nil(t, tableDesc.Columns[0].CollateName)
	assert.Nil(t, tableDesc.Columns[0].ForeignKey)
	assert.Empty(t, tableDesc.TableConstraints)
}

func TestTableColumnPrimaryKeyConflict(t *testing.T) {
	checkPrimaryKeyConflict := func(t *testing.T, conflictTypeString string, conflictType ConflictClause) {
		table, err := FromString("CREATE TABLE a (b INTEGER PRIMARY KEY ON CONFLICT " + conflictTypeString + ")")
		assert.NoError(t, err)
		assert.Nil(t, table.Schema)
		assert.NotNil(t, table.Name)
		assert.Equal(t, "a", *table.Name)
		assert.False(t, table.Temporary)
		assert.False(t, table.IfNotExists)
		assert.False(t, table.WithoutRowid)
		assert.Len(t, table.Columns, 1)
		assert.NotNil(t, table.Columns[0].Name)
		assert.Equal(t, "b", *table.Columns[0].Name)
		assert.NotNil(t, table.Columns[0].Type)
		assert.Equal(t, "INTEGER", *table.Columns[0].Type)
		assert.Nil(t, table.Columns[0].Length)
		assert.Nil(t, table.Columns[0].ConstraintName)
		assert.True(t, table.Columns[0].PrimaryKey)
		assert.False(t, table.Columns[0].Autoincrement)
		assert.False(t, table.Columns[0].NotNull)
		assert.False(t, table.Columns[0].Unique)
		assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
		assert.Equal(t, conflictType, table.Columns[0].PrimaryKeyConflict)
		assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
		assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
		assert.Nil(t, table.Columns[0].Check)
		assert.Nil(t, table.Columns[0].Default)
		assert.Nil(t, table.Columns[0].CollateName)
		assert.Nil(t, table.Columns[0].ForeignKey)
		assert.Empty(t, table.TableConstraints)
	}

	checkPrimaryKeyConflict(t, "ROLLBACK", ConflictRollback)
	checkPrimaryKeyConflict(t, "ABORT", ConflictAbort)
	checkPrimaryKeyConflict(t, "FAIL", ConflictFail)
	checkPrimaryKeyConflict(t, "IGNORE", ConflictIgnore)
	checkPrimaryKeyConflict(t, "REPLACE", ConflictReplace)
}

func TestTableColumnNotNullConflict(t *testing.T) {
	checkNotNullConflict := func(t *testing.T, conflictTypeString string, conflictType ConflictClause) {
		table, err := FromString("CREATE TABLE a (b INTEGER NOT NULL ON CONFLICT " + conflictTypeString + ")")
		assert.NoError(t, err)
		assert.Nil(t, table.Schema)
		assert.NotNil(t, table.Name)
		assert.Equal(t, "a", *table.Name)
		assert.False(t, table.Temporary)
		assert.False(t, table.IfNotExists)
		assert.False(t, table.WithoutRowid)
		assert.Len(t, table.Columns, 1)
		assert.NotNil(t, table.Columns[0].Name)
		assert.Equal(t, "b", *table.Columns[0].Name)
		assert.NotNil(t, table.Columns[0].Type)
		assert.Equal(t, "INTEGER", *table.Columns[0].Type)
		assert.Nil(t, table.Columns[0].Length)
		assert.Nil(t, table.Columns[0].ConstraintName)
		assert.False(t, table.Columns[0].PrimaryKey)
		assert.False(t, table.Columns[0].Autoincrement)
		assert.True(t, table.Columns[0].NotNull)
		assert.False(t, table.Columns[0].Unique)
		assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
		assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
		assert.Equal(t, conflictType, table.Columns[0].NotNullConflict)
		assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
		assert.Nil(t, table.Columns[0].Check)
		assert.Nil(t, table.Columns[0].Default)
		assert.Nil(t, table.Columns[0].CollateName)
		assert.Nil(t, table.Columns[0].ForeignKey)
		assert.Empty(t, table.TableConstraints)
	}

	checkNotNullConflict(t, "ROLLBACK", ConflictRollback)
	checkNotNullConflict(t, "ABORT", ConflictAbort)
	checkNotNullConflict(t, "FAIL", ConflictFail)
	checkNotNullConflict(t, "IGNORE", ConflictIgnore)
	checkNotNullConflict(t, "REPLACE", ConflictReplace)
}

func TestTableColumnUniqueConflict(t *testing.T) {
	checkUniqueConflict := func(t *testing.T, conflictTypeString string, conflictType ConflictClause) {
		table, err := FromString("CREATE TABLE a (b INTEGER UNIQUE ON CONFLICT " + conflictTypeString + ")")
		assert.NoError(t, err)
		assert.Nil(t, table.Schema)
		assert.NotNil(t, table.Name)
		assert.Equal(t, "a", *table.Name)
		assert.False(t, table.Temporary)
		assert.False(t, table.IfNotExists)
		assert.False(t, table.WithoutRowid)
		assert.Len(t, table.Columns, 1)
		assert.NotNil(t, table.Columns[0].Name)
		assert.Equal(t, "b", *table.Columns[0].Name)
		assert.NotNil(t, table.Columns[0].Type)
		assert.Equal(t, "INTEGER", *table.Columns[0].Type)
		assert.Nil(t, table.Columns[0].Length)
		assert.Nil(t, table.Columns[0].ConstraintName)
		assert.False(t, table.Columns[0].PrimaryKey)
		assert.False(t, table.Columns[0].Autoincrement)
		assert.False(t, table.Columns[0].NotNull)
		assert.True(t, table.Columns[0].Unique)
		assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
		assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
		assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
		assert.Equal(t, conflictType, table.Columns[0].UniqueConflict)
		assert.Nil(t, table.Columns[0].Check)
		assert.Nil(t, table.Columns[0].Default)
		assert.Nil(t, table.Columns[0].CollateName)
		assert.Nil(t, table.Columns[0].ForeignKey)
		assert.Empty(t, table.TableConstraints)
	}

	checkUniqueConflict(t, "ROLLBACK", ConflictRollback)
	checkUniqueConflict(t, "ABORT", ConflictAbort)
	checkUniqueConflict(t, "FAIL", ConflictFail)
	checkUniqueConflict(t, "IGNORE", ConflictIgnore)
	checkUniqueConflict(t, "REPLACE", ConflictReplace)
}

func TestTableColumnCheck(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER CHECK (b = 42))")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.NotNil(t, table.Columns[0].Check)
	assert.Equal(t, "(b = 42)", *table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Empty(t, table.TableConstraints)
}

func TestTableColumnDefault(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER DEFAULT 42)")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.NotNil(t, table.Columns[0].Default)
	assert.Equal(t, "42", *table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Empty(t, table.TableConstraints)
}

func TestTableColumnCollateName(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER COLLATE foo)")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.NotNil(t, table.Columns[0].CollateName)
	assert.Equal(t, "foo", *table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Empty(t, table.TableConstraints)
}

func TestTableColumnForeignKey(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER REFERENCES c(id))")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.NotNil(t, table.Columns[0].ForeignKey)
	assert.NotNil(t, table.Columns[0].ForeignKey.Table)
	assert.Equal(t, "c", *table.Columns[0].ForeignKey.Table)
	assert.Len(t, table.Columns[0].ForeignKey.Columns, 1)
	assert.Equal(t, "id", table.Columns[0].ForeignKey.Columns[0])
	assert.Equal(t, ForeignKeyActionNone, table.Columns[0].ForeignKey.OnDelete)
	assert.Equal(t, ForeignKeyActionNone, table.Columns[0].ForeignKey.OnUpdate)
	assert.Nil(t, table.Columns[0].ForeignKey.Match)
	assert.Equal(t, ForeignKeyDeferrableTypeNone, table.Columns[0].ForeignKey.Deferrable)
	assert.Empty(t, table.TableConstraints)
}

func TestTableConstraintName(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER, CONSTRAINT foo PRIMARY KEY (b))")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Len(t, table.TableConstraints, 1)
	assert.NotNil(t, table.TableConstraints[0].Name)
	assert.Equal(t, "foo", *table.TableConstraints[0].Name)
	assert.Equal(t, TableConstraintTypePrimaryKey, table.TableConstraints[0].Type)
	assert.Len(t, table.TableConstraints[0].IndexedColumns, 1)
	assert.NotNil(t, table.TableConstraints[0].IndexedColumns[0].Name)
	assert.Equal(t, "b", *table.TableConstraints[0].IndexedColumns[0].Name)
	assert.Nil(t, table.TableConstraints[0].IndexedColumns[0].Collate)
	assert.Equal(t, OrderNone, table.TableConstraints[0].IndexedColumns[0].Order)
	assert.Equal(t, ConflictNone, table.TableConstraints[0].ConflictClause)
	assert.Nil(t, table.TableConstraints[0].Check)
	assert.Empty(t, table.TableConstraints[0].ForeignKeyColumns)
	assert.Nil(t, table.TableConstraints[0].ForeignKey)
}

func TestTableConstraintPrimaryKey(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER, PRIMARY KEY (b))")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Len(t, table.TableConstraints, 1)
	assert.Nil(t, table.TableConstraints[0].Name)
	assert.Equal(t, TableConstraintTypePrimaryKey, table.TableConstraints[0].Type)
	assert.Len(t, table.TableConstraints[0].IndexedColumns, 1)
	assert.NotNil(t, table.TableConstraints[0].IndexedColumns[0].Name)
	assert.Equal(t, "b", *table.TableConstraints[0].IndexedColumns[0].Name)
	assert.Nil(t, table.TableConstraints[0].IndexedColumns[0].Collate)
	assert.Equal(t, OrderNone, table.TableConstraints[0].IndexedColumns[0].Order)
	assert.Equal(t, ConflictNone, table.TableConstraints[0].ConflictClause)
	assert.Nil(t, table.TableConstraints[0].Check)
	assert.Empty(t, table.TableConstraints[0].ForeignKeyColumns)
	assert.Nil(t, table.TableConstraints[0].ForeignKey)
}

func TestTableConstraintUnique(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER, UNIQUE (b))")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Len(t, table.TableConstraints, 1)
	assert.Nil(t, table.TableConstraints[0].Name)
	assert.Equal(t, TableConstraintTypeUnique, table.TableConstraints[0].Type)
	assert.Len(t, table.TableConstraints[0].IndexedColumns, 1)
	assert.NotNil(t, table.TableConstraints[0].IndexedColumns[0].Name)
	assert.Equal(t, "b", *table.TableConstraints[0].IndexedColumns[0].Name)
	assert.Nil(t, table.TableConstraints[0].IndexedColumns[0].Collate)
	assert.Equal(t, OrderNone, table.TableConstraints[0].IndexedColumns[0].Order)
	assert.Equal(t, ConflictNone, table.TableConstraints[0].ConflictClause)
	assert.Nil(t, table.TableConstraints[0].Check)
	assert.Empty(t, table.TableConstraints[0].ForeignKeyColumns)
	assert.Nil(t, table.TableConstraints[0].ForeignKey)
}

// func TestTableConstraintCheck(t *testing.T) {
// 	table, err := FromString("CREATE TABLE a (b INTEGER, CHECK (b = 42))")
// 	assert.NoError(t, err)
// 	assert.Nil(t, table.Schema)
// 	assert.NotNil(t, table.Name)
// 	assert.Equal(t, "a", *table.Name)
// 	assert.False(t, table.Temporary)
// 	assert.False(t, table.IfNotExists)
// 	assert.False(t, table.WithoutRowid)
// 	assert.Len(t, table.Columns, 1)
// 	assert.NotNil(t, table.Columns[0].Name)
// 	assert.Equal(t, "b", *table.Columns[0].Name)
// 	assert.NotNil(t, table.Columns[0].Type)
// 	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
// 	assert.Nil(t, table.Columns[0].Length)
// 	assert.Nil(t, table.Columns[0].ConstraintName)
// 	assert.False(t, table.Columns[0].PrimaryKey)
// 	assert.False(t, table.Columns[0].Autoincrement)
// 	assert.False(t, table.Columns[0].NotNull)
// 	assert.False(t, table.Columns[0].Unique)
// 	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
// 	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
// 	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
// 	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
// 	assert.Nil(t, table.Columns[0].Check)
// 	assert.Nil(t, table.Columns[0].Default)
// 	assert.Nil(t, table.Columns[0].CollateName)
// 	assert.Nil(t, table.Columns[0].ForeignKey)
// 	assert.Len(t, table.TableConstraints, 1)
// 	assert.Nil(t, table.TableConstraints[0].Name)
// 	assert.Equal(t, TableConstraintTypeUnique, table.TableConstraints[0].Type)
// 	assert.Empty(t, table.TableConstraints[0].IndexedColumns)
// 	assert.Equal(t, ConflictNone, table.TableConstraints[0].ConflictClause)
// 	assert.NotNil(t, table.TableConstraints[0].Check)
// 	assert.Equal(t, "42", *table.TableConstraints[0].Check)
// 	assert.Empty(t, table.TableConstraints[0].ForeignKeyColumns)
// 	assert.Nil(t, table.TableConstraints[0].ForeignKey)
// }

func TestTableConstraintForeignKey(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER, FOREIGN KEY (b) REFERENCES c(id))")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Len(t, table.TableConstraints, 1)
	assert.Nil(t, table.TableConstraints[0].Name)
	assert.Equal(t, TableConstraintTypeForeignKey, table.TableConstraints[0].Type)
	assert.Empty(t, table.TableConstraints[0].IndexedColumns)
	assert.Equal(t, ConflictNone, table.TableConstraints[0].ConflictClause)
	assert.Nil(t, table.TableConstraints[0].Check)
	assert.Len(t, table.TableConstraints[0].ForeignKeyColumns, 1)
	assert.Equal(t, "b", table.TableConstraints[0].ForeignKeyColumns[0])
	assert.NotNil(t, table.TableConstraints[0].ForeignKey)
	assert.NotNil(t, table.TableConstraints[0].ForeignKey.Table)
	assert.Equal(t, "c", *table.TableConstraints[0].ForeignKey.Table)
	assert.Len(t, table.TableConstraints[0].ForeignKey.Columns, 1)
	assert.Equal(t, "id", table.TableConstraints[0].ForeignKey.Columns[0])
	assert.Equal(t, ForeignKeyActionNone, table.TableConstraints[0].ForeignKey.OnDelete)
	assert.Equal(t, ForeignKeyActionNone, table.TableConstraints[0].ForeignKey.OnUpdate)
	assert.Nil(t, table.TableConstraints[0].ForeignKey.Match)
	assert.Equal(t, ForeignKeyDeferrableTypeNone, table.TableConstraints[0].ForeignKey.Deferrable)
}

func TestTableForeignKeyTable(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER REFERENCES c(id))")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.NotNil(t, table.Columns[0].ForeignKey)
	assert.NotNil(t, table.Columns[0].ForeignKey.Table)
	assert.Equal(t, "c", *table.Columns[0].ForeignKey.Table)
	assert.Len(t, table.Columns[0].ForeignKey.Columns, 1)
	assert.Equal(t, "id", table.Columns[0].ForeignKey.Columns[0])
	assert.Equal(t, ForeignKeyActionNone, table.Columns[0].ForeignKey.OnDelete)
	assert.Equal(t, ForeignKeyActionNone, table.Columns[0].ForeignKey.OnUpdate)
	assert.Nil(t, table.Columns[0].ForeignKey.Match)
	assert.Equal(t, ForeignKeyDeferrableTypeNone, table.Columns[0].ForeignKey.Deferrable)
	assert.Empty(t, table.TableConstraints)
}

func TestTableForeignKeyColumns(t *testing.T) {
	tableOneColumn, err := FromString("CREATE TABLE a (b INTEGER REFERENCES foo(id))")
	assert.NoError(t, err)
	assert.Nil(t, tableOneColumn.Schema)
	assert.NotNil(t, tableOneColumn.Name)
	assert.Equal(t, "a", *tableOneColumn.Name)
	assert.False(t, tableOneColumn.Temporary)
	assert.False(t, tableOneColumn.IfNotExists)
	assert.False(t, tableOneColumn.WithoutRowid)
	assert.Len(t, tableOneColumn.Columns, 1)
	assert.NotNil(t, tableOneColumn.Columns[0].Name)
	assert.Equal(t, "b", *tableOneColumn.Columns[0].Name)
	assert.NotNil(t, tableOneColumn.Columns[0].Type)
	assert.Equal(t, "INTEGER", *tableOneColumn.Columns[0].Type)
	assert.Nil(t, tableOneColumn.Columns[0].Length)
	assert.Nil(t, tableOneColumn.Columns[0].ConstraintName)
	assert.False(t, tableOneColumn.Columns[0].PrimaryKey)
	assert.False(t, tableOneColumn.Columns[0].Autoincrement)
	assert.False(t, tableOneColumn.Columns[0].NotNull)
	assert.False(t, tableOneColumn.Columns[0].Unique)
	assert.Equal(t, OrderNone, tableOneColumn.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, tableOneColumn.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, tableOneColumn.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, tableOneColumn.Columns[0].UniqueConflict)
	assert.Nil(t, tableOneColumn.Columns[0].Check)
	assert.Nil(t, tableOneColumn.Columns[0].Default)
	assert.Nil(t, tableOneColumn.Columns[0].CollateName)
	assert.NotNil(t, tableOneColumn.Columns[0].ForeignKey)
	assert.NotNil(t, tableOneColumn.Columns[0].ForeignKey.Table)
	assert.Equal(t, "foo", *tableOneColumn.Columns[0].ForeignKey.Table)
	assert.Len(t, tableOneColumn.Columns[0].ForeignKey.Columns, 1)
	assert.Equal(t, "id", tableOneColumn.Columns[0].ForeignKey.Columns[0])
	assert.Equal(t, ForeignKeyActionNone, tableOneColumn.Columns[0].ForeignKey.OnDelete)
	assert.Equal(t, ForeignKeyActionNone, tableOneColumn.Columns[0].ForeignKey.OnUpdate)
	assert.Nil(t, tableOneColumn.Columns[0].ForeignKey.Match)
	assert.Equal(t, ForeignKeyDeferrableTypeNone, tableOneColumn.Columns[0].ForeignKey.Deferrable)
	assert.Empty(t, tableOneColumn.TableConstraints)

	tableThreeColumns, err := FromString("CREATE TABLE a (b INTEGER REFERENCES c(ida, idb, idc))")
	assert.NoError(t, err)
	assert.Nil(t, tableThreeColumns.Schema)
	assert.NotNil(t, tableThreeColumns.Name)
	assert.Equal(t, "a", *tableThreeColumns.Name)
	assert.False(t, tableThreeColumns.Temporary)
	assert.False(t, tableThreeColumns.IfNotExists)
	assert.False(t, tableThreeColumns.WithoutRowid)
	assert.Len(t, tableThreeColumns.Columns, 1)
	assert.NotNil(t, tableThreeColumns.Columns[0].Name)
	assert.Equal(t, "b", *tableThreeColumns.Columns[0].Name)
	assert.NotNil(t, tableThreeColumns.Columns[0].Type)
	assert.Equal(t, "INTEGER", *tableThreeColumns.Columns[0].Type)
	assert.Nil(t, tableThreeColumns.Columns[0].Length)
	assert.Nil(t, tableThreeColumns.Columns[0].ConstraintName)
	assert.False(t, tableThreeColumns.Columns[0].PrimaryKey)
	assert.False(t, tableThreeColumns.Columns[0].Autoincrement)
	assert.False(t, tableThreeColumns.Columns[0].NotNull)
	assert.False(t, tableThreeColumns.Columns[0].Unique)
	assert.Equal(t, OrderNone, tableThreeColumns.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, tableThreeColumns.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, tableThreeColumns.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, tableThreeColumns.Columns[0].UniqueConflict)
	assert.Nil(t, tableThreeColumns.Columns[0].Check)
	assert.Nil(t, tableThreeColumns.Columns[0].Default)
	assert.Nil(t, tableThreeColumns.Columns[0].CollateName)
	assert.NotNil(t, tableThreeColumns.Columns[0].ForeignKey)
	assert.NotNil(t, tableThreeColumns.Columns[0].ForeignKey.Table)
	assert.Equal(t, "c", *tableThreeColumns.Columns[0].ForeignKey.Table)
	assert.Len(t, tableThreeColumns.Columns[0].ForeignKey.Columns, 3)
	assert.Equal(t, "ida", tableThreeColumns.Columns[0].ForeignKey.Columns[0])
	assert.Equal(t, "idb", tableThreeColumns.Columns[0].ForeignKey.Columns[1])
	assert.Equal(t, "idc", tableThreeColumns.Columns[0].ForeignKey.Columns[2])
	assert.Equal(t, ForeignKeyActionNone, tableThreeColumns.Columns[0].ForeignKey.OnDelete)
	assert.Equal(t, ForeignKeyActionNone, tableThreeColumns.Columns[0].ForeignKey.OnUpdate)
	assert.Nil(t, tableThreeColumns.Columns[0].ForeignKey.Match)
	assert.Equal(t, ForeignKeyDeferrableTypeNone, tableThreeColumns.Columns[0].ForeignKey.Deferrable)
	assert.Empty(t, tableThreeColumns.TableConstraints)
}

func TestTableForeignKeyActions(t *testing.T) {
	checkOnAction := func(t *testing.T, actionString string, actionDelete, actionUpdate ForeignKeyAction) {
		table, err := FromString("CREATE TABLE a (b INTEGER REFERENCES c(id) " + actionString + ")")
		assert.NoError(t, err)
		assert.Nil(t, table.Schema)
		assert.NotNil(t, table.Name)
		assert.Equal(t, "a", *table.Name)
		assert.False(t, table.Temporary)
		assert.False(t, table.IfNotExists)
		assert.False(t, table.WithoutRowid)
		assert.Len(t, table.Columns, 1)
		assert.NotNil(t, table.Columns[0].Name)
		assert.Equal(t, "b", *table.Columns[0].Name)
		assert.NotNil(t, table.Columns[0].Type)
		assert.Equal(t, "INTEGER", *table.Columns[0].Type)
		assert.Nil(t, table.Columns[0].Length)
		assert.Nil(t, table.Columns[0].ConstraintName)
		assert.False(t, table.Columns[0].PrimaryKey)
		assert.False(t, table.Columns[0].Autoincrement)
		assert.False(t, table.Columns[0].NotNull)
		assert.False(t, table.Columns[0].Unique)
		assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
		assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
		assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
		assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
		assert.Nil(t, table.Columns[0].Check)
		assert.Nil(t, table.Columns[0].Default)
		assert.Nil(t, table.Columns[0].CollateName)
		assert.NotNil(t, table.Columns[0].ForeignKey)
		assert.NotNil(t, table.Columns[0].ForeignKey.Table)
		assert.Equal(t, "c", *table.Columns[0].ForeignKey.Table)
		assert.Len(t, table.Columns[0].ForeignKey.Columns, 1)
		assert.Equal(t, "id", table.Columns[0].ForeignKey.Columns[0])
		assert.Equal(t, actionDelete, table.Columns[0].ForeignKey.OnDelete)
		assert.Equal(t, actionUpdate, table.Columns[0].ForeignKey.OnUpdate)
		assert.Nil(t, table.Columns[0].ForeignKey.Match)
		assert.Equal(t, ForeignKeyDeferrableTypeNone, table.Columns[0].ForeignKey.Deferrable)
		assert.Empty(t, table.TableConstraints)
	}

	checkOnAction(t, "", ForeignKeyActionNone, ForeignKeyActionNone)
	checkOnAction(t, "ON DELETE SET NULL", ForeignKeyActionSetNull, ForeignKeyActionNone)
	checkOnAction(t, "ON DELETE SET DEFAULT", ForeignKeyActionSetDefault, ForeignKeyActionNone)
	checkOnAction(t, "ON DELETE CASCADE", ForeignKeyActionCascade, ForeignKeyActionNone)
	checkOnAction(t, "ON DELETE RESTRICT", ForeignKeyActionRestrict, ForeignKeyActionNone)
	checkOnAction(t, "ON DELETE NO ACTION", ForeignKeyActionNoAction, ForeignKeyActionNone)
	checkOnAction(t, "ON UPDATE SET NULL", ForeignKeyActionNone, ForeignKeyActionSetNull)
	checkOnAction(t, "ON UPDATE SET DEFAULT", ForeignKeyActionNone, ForeignKeyActionSetDefault)
	checkOnAction(t, "ON UPDATE CASCADE", ForeignKeyActionNone, ForeignKeyActionCascade)
	checkOnAction(t, "ON UPDATE RESTRICT", ForeignKeyActionNone, ForeignKeyActionRestrict)
	checkOnAction(t, "ON UPDATE NO ACTION", ForeignKeyActionNone, ForeignKeyActionNoAction)
	checkOnAction(t, "ON DELETE SET NULL ON UPDATE SET NULL", ForeignKeyActionSetNull, ForeignKeyActionSetNull)
	checkOnAction(t, "ON DELETE SET DEFAULT ON UPDATE SET DEFAULT", ForeignKeyActionSetDefault, ForeignKeyActionSetDefault)
	checkOnAction(t, "ON DELETE CASCADE ON UPDATE CASCADE", ForeignKeyActionCascade, ForeignKeyActionCascade)
	checkOnAction(t, "ON DELETE RESTRICT ON UPDATE RESTRICT", ForeignKeyActionRestrict, ForeignKeyActionRestrict)
	checkOnAction(t, "ON DELETE NO ACTION ON UPDATE NO ACTION", ForeignKeyActionNoAction, ForeignKeyActionNoAction)
}

func TestTableForeignKeyMatch(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER REFERENCES c(id) MATCH foo)")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.NotNil(t, table.Columns[0].ForeignKey)
	assert.NotNil(t, table.Columns[0].ForeignKey.Table)
	assert.Equal(t, "c", *table.Columns[0].ForeignKey.Table)
	assert.Len(t, table.Columns[0].ForeignKey.Columns, 1)
	assert.Equal(t, "id", table.Columns[0].ForeignKey.Columns[0])
	assert.Equal(t, ForeignKeyActionNone, table.Columns[0].ForeignKey.OnDelete)
	assert.Equal(t, ForeignKeyActionNone, table.Columns[0].ForeignKey.OnUpdate)
	assert.NotNil(t, table.Columns[0].ForeignKey.Match)
	assert.Equal(t, "foo", *table.Columns[0].ForeignKey.Match)
	assert.Equal(t, ForeignKeyDeferrableTypeNone, table.Columns[0].ForeignKey.Deferrable)
	assert.Empty(t, table.TableConstraints)
}

func TestTableForeignKeyDeferrable(t *testing.T) {
	checkDeferrable := func(t *testing.T, deferrableString string, deferrable ForeignKeyDeferrableType) {
		table, err := FromString("CREATE TABLE a (b INTEGER REFERENCES c(id) " + deferrableString + ")")
		assert.NoError(t, err)
		assert.Nil(t, table.Schema)
		assert.NotNil(t, table.Name)
		assert.Equal(t, "a", *table.Name)
		assert.False(t, table.Temporary)
		assert.False(t, table.IfNotExists)
		assert.False(t, table.WithoutRowid)
		assert.Len(t, table.Columns, 1)
		assert.NotNil(t, table.Columns[0].Name)
		assert.Equal(t, "b", *table.Columns[0].Name)
		assert.NotNil(t, table.Columns[0].Type)
		assert.Equal(t, "INTEGER", *table.Columns[0].Type)
		assert.Nil(t, table.Columns[0].Length)
		assert.Nil(t, table.Columns[0].ConstraintName)
		assert.False(t, table.Columns[0].PrimaryKey)
		assert.False(t, table.Columns[0].Autoincrement)
		assert.False(t, table.Columns[0].NotNull)
		assert.False(t, table.Columns[0].Unique)
		assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
		assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
		assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
		assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
		assert.Nil(t, table.Columns[0].Check)
		assert.Nil(t, table.Columns[0].Default)
		assert.Nil(t, table.Columns[0].CollateName)
		assert.NotNil(t, table.Columns[0].ForeignKey)
		assert.NotNil(t, table.Columns[0].ForeignKey.Table)
		assert.Equal(t, "c", *table.Columns[0].ForeignKey.Table)
		assert.Len(t, table.Columns[0].ForeignKey.Columns, 1)
		assert.Equal(t, "id", table.Columns[0].ForeignKey.Columns[0])
		assert.Equal(t, ForeignKeyActionNone, table.Columns[0].ForeignKey.OnDelete)
		assert.Equal(t, ForeignKeyActionNone, table.Columns[0].ForeignKey.OnUpdate)
		assert.Nil(t, table.Columns[0].ForeignKey.Match)
		assert.Equal(t, deferrable, table.Columns[0].ForeignKey.Deferrable)
		assert.Empty(t, table.TableConstraints)
	}

	checkDeferrable(t, "", ForeignKeyDeferrableTypeNone)
	checkDeferrable(t, "DEFERRABLE", ForeignKeyDeferrableTypeDeferrable)
	checkDeferrable(t, "DEFERRABLE INITIALLY DEFERRED", ForeignKeyDeferrableTypeDeferrableInitiallyDeferred)
	checkDeferrable(t, "DEFERRABLE INITIALLY IMMEDIATE", ForeignKeyDeferrableTypeDeferrableInitiallyImmediate)
	checkDeferrable(t, "NOT DEFERRABLE", ForeignKeyDeferrableTypeNotDeferrable)
	checkDeferrable(t, "NOT DEFERRABLE INITIALLY DEFERRED", ForeignKeyDeferrableTypeNotDeferrableInitiallyDeferred)
	checkDeferrable(t, "NOT DEFERRABLE INITIALLY IMMEDIATE", ForeignKeyDeferrableTypeNotDeferrableInitiallyImmediate)
}

func TestTableIndexedColumnName(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER, UNIQUE (b))")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Len(t, table.TableConstraints, 1)
	assert.Nil(t, table.TableConstraints[0].Name)
	assert.Equal(t, TableConstraintTypeUnique, table.TableConstraints[0].Type)
	assert.Len(t, table.TableConstraints[0].IndexedColumns, 1)
	assert.NotNil(t, table.TableConstraints[0].IndexedColumns[0].Name)
	assert.Equal(t, "b", *table.TableConstraints[0].IndexedColumns[0].Name)
	assert.Nil(t, table.TableConstraints[0].IndexedColumns[0].Collate)
	assert.Equal(t, OrderNone, table.TableConstraints[0].IndexedColumns[0].Order)
	assert.Equal(t, ConflictNone, table.TableConstraints[0].ConflictClause)
	assert.Nil(t, table.TableConstraints[0].Check)
	assert.Empty(t, table.TableConstraints[0].ForeignKeyColumns)
	assert.Nil(t, table.TableConstraints[0].ForeignKey)
}

func TestTableIndexedColumnCollate(t *testing.T) {
	table, err := FromString("CREATE TABLE a (b INTEGER, UNIQUE (b COLLATE BINARY))")
	assert.NoError(t, err)
	assert.Nil(t, table.Schema)
	assert.NotNil(t, table.Name)
	assert.Equal(t, "a", *table.Name)
	assert.False(t, table.Temporary)
	assert.False(t, table.IfNotExists)
	assert.False(t, table.WithoutRowid)
	assert.Len(t, table.Columns, 1)
	assert.NotNil(t, table.Columns[0].Name)
	assert.Equal(t, "b", *table.Columns[0].Name)
	assert.NotNil(t, table.Columns[0].Type)
	assert.Equal(t, "INTEGER", *table.Columns[0].Type)
	assert.Nil(t, table.Columns[0].Length)
	assert.Nil(t, table.Columns[0].ConstraintName)
	assert.False(t, table.Columns[0].PrimaryKey)
	assert.False(t, table.Columns[0].Autoincrement)
	assert.False(t, table.Columns[0].NotNull)
	assert.False(t, table.Columns[0].Unique)
	assert.Equal(t, OrderNone, table.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, table.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, table.Columns[0].UniqueConflict)
	assert.Nil(t, table.Columns[0].Check)
	assert.Nil(t, table.Columns[0].Default)
	assert.Nil(t, table.Columns[0].CollateName)
	assert.Nil(t, table.Columns[0].ForeignKey)
	assert.Len(t, table.TableConstraints, 1)
	assert.Nil(t, table.TableConstraints[0].Name)
	assert.Equal(t, TableConstraintTypeUnique, table.TableConstraints[0].Type)
	assert.Len(t, table.TableConstraints[0].IndexedColumns, 1)
	assert.NotNil(t, table.TableConstraints[0].IndexedColumns[0].Name)
	assert.Equal(t, "b", *table.TableConstraints[0].IndexedColumns[0].Name)
	assert.NotNil(t, table.TableConstraints[0].IndexedColumns[0].Collate)
	assert.Equal(t, "BINARY", *table.TableConstraints[0].IndexedColumns[0].Collate)
	assert.Equal(t, OrderNone, table.TableConstraints[0].IndexedColumns[0].Order)
	assert.Equal(t, ConflictNone, table.TableConstraints[0].ConflictClause)
	assert.Nil(t, table.TableConstraints[0].Check)
	assert.Empty(t, table.TableConstraints[0].ForeignKeyColumns)
	assert.Nil(t, table.TableConstraints[0].ForeignKey)
}

func TestTableIndexedColumnOrder(t *testing.T) {
	tableAsc, err := FromString("CREATE TABLE a (b INTEGER, UNIQUE (b ASC))")
	assert.NoError(t, err)
	assert.Nil(t, tableAsc.Schema)
	assert.NotNil(t, tableAsc.Name)
	assert.Equal(t, "a", *tableAsc.Name)
	assert.False(t, tableAsc.Temporary)
	assert.False(t, tableAsc.IfNotExists)
	assert.False(t, tableAsc.WithoutRowid)
	assert.Len(t, tableAsc.Columns, 1)
	assert.NotNil(t, tableAsc.Columns[0].Name)
	assert.Equal(t, "b", *tableAsc.Columns[0].Name)
	assert.NotNil(t, tableAsc.Columns[0].Type)
	assert.Equal(t, "INTEGER", *tableAsc.Columns[0].Type)
	assert.Nil(t, tableAsc.Columns[0].Length)
	assert.Nil(t, tableAsc.Columns[0].ConstraintName)
	assert.False(t, tableAsc.Columns[0].PrimaryKey)
	assert.False(t, tableAsc.Columns[0].Autoincrement)
	assert.False(t, tableAsc.Columns[0].NotNull)
	assert.False(t, tableAsc.Columns[0].Unique)
	assert.Equal(t, OrderNone, tableAsc.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, tableAsc.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, tableAsc.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, tableAsc.Columns[0].UniqueConflict)
	assert.Nil(t, tableAsc.Columns[0].Check)
	assert.Nil(t, tableAsc.Columns[0].Default)
	assert.Nil(t, tableAsc.Columns[0].CollateName)
	assert.Nil(t, tableAsc.Columns[0].ForeignKey)
	assert.Len(t, tableAsc.TableConstraints, 1)
	assert.Nil(t, tableAsc.TableConstraints[0].Name)
	assert.Equal(t, TableConstraintTypeUnique, tableAsc.TableConstraints[0].Type)
	assert.Len(t, tableAsc.TableConstraints[0].IndexedColumns, 1)
	assert.NotNil(t, tableAsc.TableConstraints[0].IndexedColumns[0].Name)
	assert.Equal(t, "b", *tableAsc.TableConstraints[0].IndexedColumns[0].Name)
	assert.Nil(t, tableAsc.TableConstraints[0].IndexedColumns[0].Collate)
	assert.Equal(t, OrderAsc, tableAsc.TableConstraints[0].IndexedColumns[0].Order)
	assert.Equal(t, ConflictNone, tableAsc.TableConstraints[0].ConflictClause)
	assert.Nil(t, tableAsc.TableConstraints[0].Check)
	assert.Empty(t, tableAsc.TableConstraints[0].ForeignKeyColumns)
	assert.Nil(t, tableAsc.TableConstraints[0].ForeignKey)

	tableDesc, err := FromString("CREATE TABLE a (b INTEGER, UNIQUE (b DESC))")
	assert.NoError(t, err)
	assert.Nil(t, tableDesc.Schema)
	assert.NotNil(t, tableDesc.Name)
	assert.Equal(t, "a", *tableDesc.Name)
	assert.False(t, tableDesc.Temporary)
	assert.False(t, tableDesc.IfNotExists)
	assert.False(t, tableDesc.WithoutRowid)
	assert.Len(t, tableDesc.Columns, 1)
	assert.NotNil(t, tableDesc.Columns[0].Name)
	assert.Equal(t, "b", *tableDesc.Columns[0].Name)
	assert.NotNil(t, tableDesc.Columns[0].Type)
	assert.Equal(t, "INTEGER", *tableDesc.Columns[0].Type)
	assert.Nil(t, tableDesc.Columns[0].Length)
	assert.Nil(t, tableDesc.Columns[0].ConstraintName)
	assert.False(t, tableDesc.Columns[0].PrimaryKey)
	assert.False(t, tableDesc.Columns[0].Autoincrement)
	assert.False(t, tableDesc.Columns[0].NotNull)
	assert.False(t, tableDesc.Columns[0].Unique)
	assert.Equal(t, OrderNone, tableDesc.Columns[0].PrimaryKeyOrder)
	assert.Equal(t, ConflictNone, tableDesc.Columns[0].PrimaryKeyConflict)
	assert.Equal(t, ConflictNone, tableDesc.Columns[0].NotNullConflict)
	assert.Equal(t, ConflictNone, tableDesc.Columns[0].UniqueConflict)
	assert.Nil(t, tableDesc.Columns[0].Check)
	assert.Nil(t, tableDesc.Columns[0].Default)
	assert.Nil(t, tableDesc.Columns[0].CollateName)
	assert.Nil(t, tableDesc.Columns[0].ForeignKey)
	assert.Len(t, tableDesc.TableConstraints, 1)
	assert.Nil(t, tableDesc.TableConstraints[0].Name)
	assert.Equal(t, TableConstraintTypeUnique, tableDesc.TableConstraints[0].Type)
	assert.Len(t, tableDesc.TableConstraints[0].IndexedColumns, 1)
	assert.NotNil(t, tableDesc.TableConstraints[0].IndexedColumns[0].Name)
	assert.Equal(t, "b", *tableDesc.TableConstraints[0].IndexedColumns[0].Name)
	assert.Nil(t, tableDesc.TableConstraints[0].IndexedColumns[0].Collate)
	assert.Equal(t, OrderDesc, tableDesc.TableConstraints[0].IndexedColumns[0].Order)
	assert.Equal(t, ConflictNone, tableDesc.TableConstraints[0].ConflictClause)
	assert.Nil(t, tableDesc.TableConstraints[0].Check)
	assert.Empty(t, tableDesc.TableConstraints[0].ForeignKeyColumns)
	assert.Nil(t, tableDesc.TableConstraints[0].ForeignKey)
}
